# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR =../googletest/googletest

# Where to find user code.
USER_DIR=.
SRC_DIR=${USER_DIR}/src
OBJ_DIR=${USER_DIR}/obj

TRAF_H=/home/haolin/work/repos/xwxodbc/incubator-trafodion
ODBC_DIR=$(TRAF_H)/core/conn/unixodbc/odbc/odbcclient/unixcli/
ODBC_DIR_OBJ=$(TRAF_H)/core/conn/unixodbc/odbc/odbcclient/unixcli/obj/linux64/debug/
# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -I $(USER_DIR)/include -I$(ODBC_DIR)./cli/ -I$(ODBC_DIR)./Interface  -I$(ODBC_DIR)../../dependencies/windows/ -I$(ODBC_DIR)../../dependencies/security/include -I$(ODBC_DIR)./sql/ -I$(ODBC_DIR)../../../../../sql/cli -I$(ODBC_DIR)../../../../../sql/common -I$(ODBC_DIR)./inc -I$(ODBC_DIR)../../Krypton/ -I$(ODBC_DIR)./common/ -I$(ODBC_DIR)./TCPIPV4/ -I$(ODBC_DIR)./trace/ -I$(ODBC_DIR)./platform -I$(ODBC_DIR)./security_dll/common -I$(ODBC_DIR)./security_dll/header -I $(TRAF_H)/core/sqf/export/include -I$(TRAF_H)/core/sqf/inc/cextdecs/
# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wextra -pthread -m64 -Dunixcli -DVERSION3 -DMXLINUX -DDISABLE_TRACE -DSIZEOF_LONG=8 -DSIZEOF_LONG_INT=8 -w -DASYNCIO -DTRACE_COMPRESSION -I$(ICU)/linux64/include -I/usr/include/openssl

LIBS = -lpthread -lrt -ldl -lz -L$(ICU)/linux64/lib -licuuc -Wl,--hash-style=both -lssl -llber 
#-Wl,--version-script=linux.exports
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = unitTest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o ${OBJ_DIR}/*

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

CLIOBJS = dmadmin.o dmcpool.o dmfunctions.o dminstall.o dmmapping.o drvrmanager.o version.o cdatasource.o gettrace.o init.o traceext.o odbcas_drvr.o odbcs_drvr.o transport.o cconnect.o cdesc.o cdiag.o cenv.o chandle.o cstmt.o ctosqlconv.o diagfunctions.o drvrglobal.o drvrnet.o netcommon.o netconnect.o netstmt.o sqlconnect.o sqldesc.o sqlenv.o neofunc.o sqlhandle.o sqlstmt.o sqltocconv.o odbcmsg.o translte.o asyncIO.o charsetconv.o transportbase.o TCPIPUnixDrvr.o marshaling.o marshalingdrvr_drvr.o swapdrvr_drvr.o windows.o compression.o swap.o nskieee.o ExpConvMxcs.o nix.o verslnxdrvr.o TCPIPV4.o Cipher.o Key.o MessageDigest.o secpwd.o Security.o securityException.o StaticLocking.o utils.o 

  

DRVRCLIOBJ = $(addprefix $(ODBC_DIR_OBJ),$(CLIOBJS))
# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
${OBJ_DIR}/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o ${OBJ_DIR}/gtest-all.o

${OBJ_DIR}/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o ${OBJ_DIR}/gtest_main.o

gtest.a : ${OBJ_DIR}/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(USER_DIR)/lib/gtest_main.a : ${OBJ_DIR}/gtest-all.o ${OBJ_DIR}/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

${OBJ_DIR}/%.o : ${SRC_DIR}/%.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@ 

unitTest : ${OBJ_DIR}/typeTest.o \
	       ${DRVRCLIOBJ} \
		   ${OBJ_DIR}/commonFunction.o \
	       $(USER_DIR)/lib/gtest_main.a
	$(CXX) $(LIBS) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ 
